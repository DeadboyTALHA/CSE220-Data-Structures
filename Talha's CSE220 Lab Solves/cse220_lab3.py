# -*- coding: utf-8 -*-
"""CSE220 Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1edzPz6tPLoRfSD3hi_6VYQ1Rygv_zupn
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""**Assignment Part 1: Doubly Linked List**

For Assignment Part 1, you should write your full code in the following cells along with your driver codes on your own.
"""

#Assignment Part 1

class Patient:
  #write a constructor
  def __init__(self, id, name, age, bloodgroup, next, prev):
    self.id = id
    self.name = name
    self.age = age
    self.bloodgroup = bloodgroup
    self.next = next
    self.prev = prev

class WRM:

  def __init__(self):
    #Creating the dummy head
    self.dh = Patient(None,None,None,None,None,None)
    self.dh.next = self.dh
    self.dh.prev = self.dh

  def registerPatient(self,id, name, age, bloodgroup):
    #To Do
    new_patient = Patient(id, name, age, bloodgroup, self.dh, self.dh.prev)
    self.dh.prev.next = new_patient
    self.dh.prev = new_patient
    print(f"Successfully Registered New Patient: {new_patient.name}")

  def servePatient(self):
    #To Do
    if self.dh.next != self.dh:
      temp=self.dh.next
      self.dh.next=temp.next
      temp.next.prev=self.dh
      print(f'Serving Patient: {temp.name}')
    else:
      print('No Patients to Serve.')

  def showAllPatient(self):
    #To Do
    if self.dh.next != self.dh:
      print("Patients in line:")
      temp=self.dh.next
      while temp != self.dh:
        print(f'ID: {temp.id}, Name: {temp.name}, Age: {temp.age}, Blood Group: {temp.bloodgroup}')
        temp = temp.next
    else:
      print('No Patients Waiting.')

  def canDoctorGoHome(self):
    #To Do
    if self.dh.next == self.dh:
      return "Yes"
    else:
      return "No"

  def cancelAll(self):
    #To Do
    self.dh.next=self.dh
    self.dh.prev=self.dh
    print("Sucessfully Cancelled All Appointments.")

  def ReverseTheLine(self):
    #To Do
    if self.dh.next != self.dh:
      tail = self.dh.next
      while tail != self.dh:
        temp1 = tail.next
        tail.next = tail.prev
        tail.prev = temp1
        tail = tail.prev
      temp2 = self.dh.next
      self.dh.next = self.dh.prev
      self.dh.prev = temp2
      print("Successfully Reversed The Patient Line.")
    else:
      print('Reversing Patient Line is Unsuccessful.')

#Write a Tester Code in this cell
print("**Welcome to Waiting Room Management System**")
wrm1 = WRM()
wrm1.registerPatient(1234, "ABC", 45, "A+")
wrm1.registerPatient(5678, "DEF", 50, "B+")
wrm1.registerPatient(9012, "GHI", 55, "A-")
wrm1.registerPatient(3456, "JKL", 65, "B-")
wrm1.servePatient()
wrm1.showAllPatient()
wrm1.servePatient()
print(wrm1.canDoctorGoHome())
wrm1.ReverseTheLine()
wrm1.showAllPatient()
wrm1.servePatient()
wrm1.cancelAll()
wrm1.showAllPatient()
wrm1.ReverseTheLine()
print(wrm1.canDoctorGoHome())

"""**Assignment Part 2: Stack**

Linked List based Stack is implemented in the following cell.
"""

class Node:
  def __init__(self,elem=None,next=None):
    self.elem = elem
    self.next = next

class Stack:
  def __init__(self):
    self.__top = None

  def push(self,elem):
    nn = Node(elem,self.__top)
    self.__top = nn

  def pop(self):
    if self.__top == None:
      #print('Stack Underflow')
      return None
    e = self.__top
    self.__top = self.__top.next
    return e.elem

  def peek(self):
    if self.__top == None:
      #print('Stack Underflow')
      return None
    return self.__top.elem

  def isEmpty(self):
    return self.__top == None

#You can run this driver code cell to understand the methods of Stack class
st = Stack()
st.push(4)
st.push(3)
st.push(5)
st.push(1)
st.push(9)

print('Peeked Element: ',st.peek())
print('Popped Element: ',st.pop())
print('Popped Element: ',st.pop())
print('Popped Element: ',st.pop())
print('Peeked Element: ',st.peek())
print('Popped Element: ',st.pop())
print('Popped Element: ',st.pop())
print('Peeked Element: ',st.peek())
print('Popped Element: ',st.pop())
print(st.isEmpty())

def print_stack(st):
  if st.isEmpty():
    return
  p = st.pop()
  print('|',p,end=' ')
  if p<10:
    print(' |')
  else:
    print('|')
  #print('------')
  print_stack(st)
  st.push(p)

# st = Stack()
# st.push(4)
# st.push(3)
# st.push(5)
# st.push(1)
# st.push(9)
# print_stack(st)
# print('------')

"""Task 1: Diamond Count"""

def diamond_count(stack,string):
  #TO DO
  c = 0
  for i in string:
    if i == '<':
      stack.push(i)
    elif i == '>':
      if stack.isEmpty() == False and stack.peek() == '<':
        stack.pop()
        c += 1
  return c

print('Test 01')
stack = Stack()
string = '<..><.<..>> '
returned_value = diamond_count(stack,string)
print(f'Number of Diamonds: {returned_value}') #This should print 3
unittest.output_test(returned_value, 3)
print('-----------------------------------------')


print('Test 02')
stack = Stack()
string = '<<<..<......<<<<....>'
returned_value = diamond_count(stack,string)
print(f'Number of Diamonds: {returned_value}') #This should print 1
unittest.output_test(returned_value, 1)
print('-----------------------------------------')


print('Test 03')
stack = Stack()
string = '>>><...<<..>>...>...>>>'
returned_value = diamond_count(stack,string)
print(f'Number of Diamonds: {returned_value}') #This should print 3
unittest.output_test(returned_value, 3)
print('-----------------------------------------')

"""Task 2: Tower of Blocks"""

def remove_block(stack, n):
  #TO DO
  c = 0
  store = Stack()
  while stack.isEmpty() == False:
    c += 1
    if c != n:
      store.push(stack.pop())
    else:
      stack.pop()
      break
  while store.isEmpty() == False:
    stack.push(store.pop())
  return stack

print('Test 01')
st = Stack()
st.push(4)
st.push(19)
st.push(23)
st.push(17)
st.push(5)
print('Stack:')
print_stack(st)
print('------')
remove_block(st,2)
print('After Removal')
print_stack(st)
print('------')

print()
print('======================================')
print()

print('Test 02')
st = Stack()
st.push(73)
st.push(85)
st.push(15)
st.push(41)
print('Stack:')
print_stack(st)
print('------')
remove_block(st,3)
print('After Removal')
print_stack(st)
print('------')

print()
print('======================================')
print()

"""Task 3: Stack Reverse"""

def conditional_reverse(stack):
  #To Do
  result = Stack()
  top = None
  while stack.isEmpty() == False:
    temp = stack.pop()
    if top != temp:
      result.push(temp)
      top = temp
  return result

print('Test 01')
st=Stack()
st.push(10)
st.push(10)
st.push(20)
st.push(20)
st.push(30)
st.push(10)
st.push(50)
print('Stack:')
print_stack(st)
print('------')
reversed_stack=conditional_reverse(st)
print('Conditional Reversed Stack:')
print_stack(reversed_stack) # This stack contains 50, 10, 30, 20, 10 in this order whereas top element should be 10
print('------')