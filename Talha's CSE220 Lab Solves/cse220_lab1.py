# -*- coding: utf-8 -*-
"""CSE220 Lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QfIWzQgH4ZDTgGfYkllJBxJul6JtT5Oe
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
  row,col = m.shape
  for i in range(row):
    c = 1
    print('|', end='')
    for j in range(col):
      c += 1
      if(len(str(m[i][j])) == 1):
        print(' ',m[i][j], end = '  |')
        c += 6
      else:
        print(' ',m[i][j], end = ' |')
        c += 6
    print()
    print('-'*(c-col))

#Task 01: Merge Lineup

def mergeLineup(pokemon_1, pokemon_2):
  #To Do
  column = pokemon_1.shape[0]
  result = np.zeros(column, dtype = int)
  for i in range(column):
    if pokemon_1[i] == None:
      result[i] = pokemon_2[column-1-i]
    elif pokemon_2[column-1-i] == None:
      result[i] = pokemon_1[i]
    elif pokemon_1[i] == None and pokemon_2[column-1-i] == None:
      result[i] = 0
    else:
      result[i] = pokemon_1[i] + pokemon_2[column-1-i]
  return result
print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):
  # TO DO
  flag = True
  column = cards.shape[0]
  for i in range(column):
    if t == cards[i]:
      if flag:
        flag = False
        cards[i] = 0
      else:
        flag = True
  for j in range(column):
    if cards[j] == 0:
      for k in range(j, column-1):
        cards[k], cards[k+1] = cards[k+1], cards[k]
  return cards

print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

#Task 03: Decryption Process

def decrypt_matrix(matrix):
  #To Do
  c = 0
  row, column = matrix.shape
  sums = np.zeros(column, dtype = int)
  n = column//2 + 1
  result = np.zeros(n, dtype = int)
  for i in range(column):
    sum = 0
    for j in range(row):
      sum += matrix[j][i]
    sums[c] = sum
    c+=1
  for k in range(n):
    result[k] = sums[k+1] - sums[k]
  return result

matrix=np.array([[1,3,1],
                 [6,4,2],
                 [5,1,7],
                 [9,3,3],
                 [8,5,4]
                 ])

returned_array=decrypt_matrix(matrix)
print(returned_array)
#This should print [-13, 1]

# Task 04: Zigzag Walk

def walk_zigzag(floor):
  #TO DO
  row, column = floor.shape
  for i in range(column):
    if row%2 == 0 and i%2 != 0:
      for j in range(row):
        if j%2 != 0:
          print(floor[row-j][i], end = ' ')
    elif i%2 == 0:
      for j in range(row):
        if j%2 == 0:
          print(floor[j][i], end = ' ')
    else:
      for j in range(row):
        if j%2 != 0:
          print(floor[row-1-j][i], end = ' ')
    print()


floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

# Task 05: Row Rotation Policy of BRACU Classroom
def row_rotation(exam_week, seat_status):
  #To Do
  row = seat_status.shape[0]
  for i in range(1, exam_week):
    temp = seat_status[row-1].copy()
    for j in range(row-1, 0, -1):
      seat_status[j] = seat_status[j-1]
    seat_status[0] = temp
  print(seat_status)
  for k in range(row):
    if 'AA' in seat_status[k]:
      return k + 1


seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],
                  ['F' , 'G' , 'H' , 'I' , 'J'],
                  ['K' , 'L' , 'M' , 'N' , 'O'],
                  ['P' , 'Q' , 'R' , 'S' , 'T'],
                  ['U' , 'V' , 'W' , 'X' , 'Y'],
                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])
exam_week=3
print_matrix(seat_status)
print()
row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation
print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2

#Task 06: Matrix Compression

def compress_matrix(mat):
  #TO DO
  row, column = len(mat), len(mat[0])
  result = np.zeros((row//2, column//2), dtype=int)
  for i in range(0, row, 2):
    for j in range(0, column, 2):
      sum = mat[i][j] + mat[i][j+1] + mat[i+1][j] + mat[i+1][j+1]
      result[i//2][j//2] = sum
  return result

matrix=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(matrix)
print("...............")
returned_array=compress_matrix(matrix)
print_matrix(returned_array)
#This should print

#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

#Task 07: Game Arena

def play_game(arena):
  #TO DO
  row, column = arena.shape
  point = 0
  for i in range(row):
    for j in range(column):
      if (arena[i][j] % 50 == 0) and (arena[i][j] >= 50):
        if i > 0 and arena[i-1][j] == 2:
          point += 2
        if j > 0 and arena[i][j-1] == 2:
          point += 2
        if i < (row-1) and arena[i+1][j] == 2:
          point += 2
        if j < (column-1) and arena[i][j+1] == 2:
          point += 2
  pr = f'Points Gained: {point}.'
  if point >= 10:
    print(f'{pr} Your team has survived the game.')
  else:
    print(f'{pr} Your team is out.')

arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.